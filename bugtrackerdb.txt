\qecho YMK
\qecho Bug Tracker Database
\qecho

\c postgres



-- Creating the bug tracking system database
CREATE DATABASE bugtrackerdb;
\c bugtrackerdb

-- Creating the Roles table
CREATE TABLE Roles (
    RoleId SERIAL PRIMARY KEY,
    Name VARCHAR(100) UNIQUE NOT NULL
);

-- Creating the Users table
CREATE TABLE Users (
    UserId SERIAL PRIMARY KEY,
    FirstName VARCHAR(60) NOT NULL,
    LastName VARCHAR(60) NOT NULL,
    Email VARCHAR(60) UNIQUE NOT NULL,
    Password VARCHAR(255) NOT NULL,  -- Increased length for hashed passwords
    RoleId INT,
    IsActive BOOLEAN DEFAULT TRUE,
    FOREIGN KEY (RoleId) REFERENCES Roles(RoleId)
);

CREATE INDEX idx_user_email ON Users(Email);  -- Index for faster lookup by email

-- Creating the Projects table
CREATE TABLE Projects (
    ProjectId SERIAL PRIMARY KEY,
    Name VARCHAR(100) NOT NULL,
    StartDate DATE,
    EndDate DATE,
    ProjectManagerId INT,
    FOREIGN KEY (ProjectManagerId) REFERENCES Users(UserId)
);

-- Creating the Status table
CREATE TABLE Status (
    StatusId SERIAL PRIMARY KEY,
    StatusName VARCHAR(100) UNIQUE NOT NULL
);

-- Creating the Severity table
CREATE TABLE Severity (
    SeverityId SERIAL PRIMARY KEY,
    SeverityName VARCHAR(100) UNIQUE NOT NULL
);

-- Creating the Bugs table
CREATE TABLE Bugs (
    BugId SERIAL PRIMARY KEY,
    Title VARCHAR(100) NOT NULL,
    Description TEXT,
    ProjectId INT,
    StatusId INT,
    SeverityId INT,
    AssignedTo INT,
    ReportedBy INT,
    FOREIGN KEY (ProjectId) REFERENCES Projects(ProjectId),
    FOREIGN KEY (StatusId) REFERENCES Status(StatusId),
    FOREIGN KEY (SeverityId) REFERENCES Severity(SeverityId),
    FOREIGN KEY (AssignedTo) REFERENCES Users(UserId),
    FOREIGN KEY (ReportedBy) REFERENCES Users(UserId)
);

-- Creating the Audit_logs table
CREATE TABLE Audit_logs (
    LogId SERIAL PRIMARY KEY,
    BugId INT,
    ChangedBy INT,
    ChangeType VARCHAR(100),
    ChangeDescription TEXT,
    ChangeDate TIMESTAMP WITH TIME ZONE,
    FOREIGN KEY (BugId) REFERENCES Bugs(BugId),
    FOREIGN KEY (ChangedBy) REFERENCES Users(UserId)
);

-- Inserting initial data into Roles
INSERT INTO Roles (Name) VALUES ('Admin'), ('Project Manager'), ('Developer'), ('Tester');

-- Inserting initial data into Status
INSERT INTO Status (StatusName) VALUES ('Open'), ('In Progress'), ('Resolved'), ('Closed');

-- Inserting initial data into Severity
INSERT INTO Severity (SeverityName) VALUES ('Critical'), ('High'), ('Medium'), ('Low');

-- Preparing statement to insert new users
PREPARE insert_user (VARCHAR(60), VARCHAR(60), VARCHAR(60), VARCHAR(255), INT, BOOLEAN) AS
    INSERT INTO Users (FirstName, LastName, Email, Password, RoleId, IsActive) 
    VALUES ($1, $2, $3, $4, $5, $6);

-- Execute the prepared statement with sample data
EXECUTE insert_user('John', 'Doe', 'john.doe@example.com', 'hashed_password_here', 1, TRUE);
EXECUTE insert_user('Jane', 'Smith', 'jane.smith@example.com', 'hashed_password_here', 3, TRUE);

-- Prepare and execute other operations as needed
-- For example, updating a bug status might be a common operation
PREPARE update_bug_status (INT, INT) AS
    UPDATE Bugs SET StatusId = $1 WHERE BugId = $2;

-- Example execution for updating a bug status
EXECUTE update_bug_status(2, 100); -- Assuming 'In Progress' has StatusId = 2 and BugId = 100 exists

-- Deallocate prepared statements if they are no longer needed
DEALLOCATE insert_user;
DEALLOCATE update_bug_status;

\c postgres
SELECT current_database();

--DROP DATABASE bugtrackerdb;
